{"version":3,"sources":["components/stock/stock.component.tsx","components/stocks/stocks.components.tsx","utils/socket.ts","constants.ts","App.tsx","index.tsx"],"names":["Stock","name","price","React","useState","color","setColor","Date","lastUpdate","setLastUpdate","history","setHistory","prevPrice","value","ref","useRef","useEffect","current","usePrevious","oldPrice","TableRow","TableCell","component","scope","style","toFixed","moment","fromNow","data","limit","useStyles","makeStyles","theme","toolbar","backgroundColor","appbar","marginBottom","spacing","title","flexGrow","Stocks","stocks","classes","AppBar","className","position","Toolbar","Typography","variant","Paper","maxWidth","margin","TableContainer","Table","aria-label","TableHead","TableBody","Object","keys","map","stock","idx","key","ws","WebSocket","connectInterval","onopen","console","log","clearTimeout","createMuiTheme","palette","type","div","width","minHeight","App","setStocks","onmessage","evt","messages","JSON","parse","currentStocks","message","prevStocks","close","ThemeProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55be98e9.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport moment from \"moment\";\nimport { Sparklines, SparklinesLine, SparklinesSpots } from \"react-sparklines\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nfunction usePrevious(value: number) {\n  const ref: any = React.useRef();\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\ninterface IStock {\n  name: string;\n  price: number;\n}\n\nconst Stock: FunctionComponent<IStock> = ({ name, price }) => {\n  const [color, setColor] = React.useState<string>(\"white\");\n  const [lastUpdate, setLastUpdate] = React.useState<Date>(new Date());\n  const [history, setHistory] = React.useState<number[]>([]);\n  const prevPrice: number = usePrevious(price);\n\n  React.useEffect(() => {\n    if (prevPrice) {\n      if (prevPrice < price) {\n        setColor(\"#388e3c\");\n      } else {\n        setColor(\"#d32f2f\");\n      }\n    }\n    setHistory((oldPrice) => [...oldPrice, price]);\n    setLastUpdate(new Date());\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [price]);\n\n  return (\n    <TableRow>\n      <TableCell component=\"th\" scope=\"row\">\n        {name}\n      </TableCell>\n      <TableCell style={{ color: color }} color=\"error\">\n        {price.toFixed(2)}\n      </TableCell>\n      <TableCell>{moment(lastUpdate).fromNow()}</TableCell>\n      <TableCell>\n        <Sparklines data={history} limit={20}>\n          <SparklinesLine color=\"#1c8cdc\" />\n          <SparklinesSpots />\n        </Sparklines>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default Stock;\n","import React, { FunctionComponent } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Stock from \"../stock/stock.component\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    backgroundColor: \"#673ab7\",\n  },\n  appbar: {\n    backgroundColor: \"#673ab7\",\n    marginBottom: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\ninterface IStocks {\n  stocks: {\n    string?: string;\n  };\n}\nconst Stocks: FunctionComponent<IStocks> = ({ stocks }) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <AppBar className={classes.appbar} position=\"static\">\n        <Toolbar className={classes.toolbar}>\n          <Typography variant=\"h6\" className={classes.title}>\n            Stocks\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Paper style={{ maxWidth: \"900px\", margin: \"auto\" }}>\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Name</TableCell>\n                <TableCell>Price</TableCell>\n                <TableCell>Last Updated</TableCell>\n                <TableCell>History</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {Object.keys(stocks).map((stock, idx) => {\n                return <Stock name={stock} key={idx} price={stocks[stock]} />;\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n    </>\n  );\n};\n\nexport default Stocks;\n","import { websocketUrl } from \"../constants\";\n\nlet ws = new WebSocket(websocketUrl);\nlet connectInterval = null;\nlet timeout: number = 250;\n\nconst connect = () => {\n  ws = new WebSocket(websocketUrl);\n\n  ws.onopen = () => {\n    console.log(\"connected to websocket\");\n    clearTimeout(connectInterval);\n  };\n\n  ws.onclose = (e) => {\n    console.log(`Socket is closed. Reconnecting...`, e.reason);\n    timeout = timeout + timeout;\n    connectInterval = setTimeout(\n      checkWebsocketConnection,\n      Math.min(10000, timeout)\n    );\n  };\n\n  ws.onerror = (err) => {\n    console.error(\"Socket encountered error: \", err, \"Closing socket\");\n    ws.close();\n  };\n};\n\nws.onopen = () => {\n  console.log(\"connected websocket main component\");\n  timeout = 250;\n  clearTimeout(connectInterval);\n};\n\nfunction checkWebsocketConnection() {\n  if (!ws || ws.readyState === WebSocket.CLOSED) connect();\n}\n\nexport default ws;\n","export const websocketUrl:string = \"ws://stocks.mnet.website\";","import React, { FunctionComponent } from \"react\";\nimport \"./App.css\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Stocks from \"./components/stocks/stocks.components\";\nimport ws from \"./utils/socket\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst useStyles = makeStyles({\n  div: {\n    width: \"100%\",\n    minHeight: \"100vh\",\n    backgroundColor: \"#303030\",\n  },\n});\n\ninterface IStocks {\n    string?: string;\n}\nconst App: FunctionComponent = () => {\n  const classes = useStyles();\n  const [stocks, setStocks] = React.useState<IStocks>({});\n\n  React.useEffect(() => {\n    ws.onmessage = (evt) => {\n      const messages = JSON.parse(evt.data);\n      const currentStocks:IStocks  = {};\n      for (const message of messages) {\n        currentStocks[message[0]] = message[1];\n      }\n      setStocks((prevStocks) => ({ ...prevStocks, ...currentStocks }));\n    };\n    return () => {\n      ws.close();\n    };\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={classes.div}>\n        <Stocks stocks={stocks} />\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}